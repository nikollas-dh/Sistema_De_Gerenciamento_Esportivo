/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.projetofinal;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
/**
 *
 * @author 25163093
 */
public class CadastroDeTimes extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(CadastroDeTimes.class.getName());
    private final DefaultListModel<Time> listModel = new DefaultListModel<>();
    
    /**
     * Creates new form CadastroDeTimes
     */
    public CadastroDeTimes() {
        initComponents();
        preencherComboBox();
        btnEditar.setVisible(false);
        btnDelet.setVisible(false);
        listTimes.setModel(listModel);
        preencherListBox();
    }
    

        private static final String URL = "jdbc:mariadb://localhost:3306/projeto_final";
        private static final String USERNAME = "root";
        private static final String PASSWORD = "senai";
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNomeTime = new javax.swing.JTextField();
        txtCidade = new javax.swing.JTextField();
        txtAnoFundacao = new javax.swing.JTextField();
        txtTecnico = new javax.swing.JTextField();
        btnCadastrar = new javax.swing.JButton();
        lblCadastro = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        comboBoxTimes = new javax.swing.JComboBox<>();
        btnEditar = new javax.swing.JButton();
        btnDelet = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listTimes = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel1.setText("Nome time");

        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel2.setText("Cidade");

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel3.setText("Ano de Fundação");

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel4.setText("Técnico");

        txtCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCidadeActionPerformed(evt);
            }
        });

        txtAnoFundacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAnoFundacaoActionPerformed(evt);
            }
        });

        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        lblCadastro.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        lblCadastro.setText("CADASTRAR TIME");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setToolTipText("");
        jSeparator1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        comboBoxTimes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxTimesItemStateChanged(evt);
            }
        });
        comboBoxTimes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                comboBoxTimesMouseClicked(evt);
            }
        });
        comboBoxTimes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTimesActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnDelet.setText("Deletar");

        listTimes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listTimesMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                listTimesMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(listTimes);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Lista De Times");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(lblCadastro))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtNomeTime, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addComponent(txtCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3)
                                .addComponent(txtAnoFundacao, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4)
                                .addComponent(txtTecnico, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnEditar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCadastrar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnDelet, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxTimes, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(385, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblCadastro)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNomeTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAnoFundacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTecnico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCadastrar))
                            .addComponent(jSeparator1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(comboBoxTimes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnDelet)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditar)))
                .addContainerGap(124, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtAnoFundacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAnoFundacaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAnoFundacaoActionPerformed

    private void txtCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCidadeActionPerformed

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed

        String nomeTime = txtNomeTime.getText();
        String cidade = txtCidade.getText();
        int anoFundacao = Integer.parseInt(txtAnoFundacao.getText());
        String tecnico = txtTecnico.getText();
        insertTime(nomeTime, cidade, anoFundacao, tecnico);
        
        limparCampos();
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void comboBoxTimesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTimesActionPerformed
        Time selecionado = (Time) comboBoxTimes.getSelectedItem();
        if (selecionado != null) {
             pesquisarPorId(selecionado.getId());
             lblCadastro.setText("EDITAR TIME");
             btnEditar.setVisible(true);
             btnCadastrar.setVisible(false);
        } else if(selecionado == null)
        {
            limparCampos();
            lblCadastro.setText("CADASTRAR TIME");
            btnCadastrar.setVisible(true);
            btnEditar.setVisible(false);
        }
                 
    }//GEN-LAST:event_comboBoxTimesActionPerformed

    private void comboBoxTimesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboBoxTimesMouseClicked
       
    }//GEN-LAST:event_comboBoxTimesMouseClicked

    private void comboBoxTimesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxTimesItemStateChanged
         
    }//GEN-LAST:event_comboBoxTimesItemStateChanged

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed

        String nomeTime = txtNomeTime.getText();
        String cidade = txtCidade.getText();
        int anoFundacao = Integer.parseInt(txtAnoFundacao.getText());
        String tecnico = txtTecnico.getText();
        Time selecionado = (Time) comboBoxTimes.getSelectedItem();
        editarTime(nomeTime, cidade, anoFundacao, tecnico, selecionado.getId());
        
        limparCampos();        
    }//GEN-LAST:event_btnEditarActionPerformed

    private void listTimesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listTimesMouseClicked
        Time selecionado = listTimes.getSelectedValue();
        if (selecionado != null) {
            pesquisarPorId(selecionado.getId());
        } else if(listTimes.getSelectedIndex() == -1) {
            limparCampos();
        }
    }//GEN-LAST:event_listTimesMouseClicked

    private void listTimesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listTimesMousePressed
       int index = listTimes.locationToIndex(evt.getPoint());
        if (index == -1) {
            listTimes.clearSelection();
            limparCampos();
        }
        System.out.println(index);
    }//GEN-LAST:event_listTimesMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new CadastroDeTimes().setVisible(true));
    }
    
    public void testConnection() {
        try (Connection connection = getConnection()) {
            System.out.println("Connected to MariaDB database successfully!");
           
            // Get database metadata
            String sql = "SELECT VERSION(), DATABASE(), USER()";
            try (Statement stmt = connection.createStatement();
                 ResultSet rs = stmt.executeQuery(sql)) {
               
                if (rs.next()) {
                    System.out.println("MariaDB Version: " + rs.getString(1));
                    System.out.println("Current Database: " + rs.getString(2));
                    System.out.println("Current User: " + rs.getString(3));
                }
            }
        } catch (SQLException e) {
            System.err.println("Connection failed!");
            e.printStackTrace();
        }
    }
 
 public Connection getConnection() throws SQLException {
     return DriverManager.getConnection(URL, USERNAME, PASSWORD);
 }
 
 public void insertTime(String nome, String cidade, int ano, String tecnico) {
        String sql = "INSERT INTO time (nome, cidade, ano_fundacao, tecnico) VALUES (?, ?, ?, ?)";
       
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
           
            pstmt.setString(1, nome);
            pstmt.setString(2, cidade);
            pstmt.setInt(3, ano);
            pstmt.setString(4, tecnico);
           
            int affectedRows = pstmt.executeUpdate();
           
            if (affectedRows > 0) {
                try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        long id = generatedKeys.getLong(1);
                        System.out.println("User inserted with ID: " + id);
                    }
                }
            }
           
        } catch (SQLException e) {
            System.err.println("Error inserting user: " + e.getMessage());
        }
    }
  
 
  public void limparCampos(){
     txtCidade.setText("");
     txtNomeTime.setText("");
     txtAnoFundacao.setText("");
     txtTecnico.setText("");
 }
    private void preencherComboBox() {
    String sql = "SELECT id_time, nome FROM time";
    try (Connection conn = DriverManager.getConnection(URL, USERNAME, PASSWORD);
         PreparedStatement pst = conn.prepareStatement(sql);
         ResultSet rs = pst.executeQuery()) {

        comboBoxTimes.removeAllItems(); 
        comboBoxTimes.addItem(null); // opcional, deixa um "vazio" na primeira posição

        while (rs.next()) {
            int id = rs.getInt("id_time");
            String nome = rs.getString("nome");
            comboBoxTimes.addItem(new Time(id, nome));
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao carregar times: " + e.getMessage());
    }
}
    
   private void preencherListBox() {
    String sql = "SELECT id_time, nome FROM time";
    
    try (Connection conn = DriverManager.getConnection(URL, USERNAME, PASSWORD);
         PreparedStatement pst = conn.prepareStatement(sql);
         ResultSet rs = pst.executeQuery()) {

        listModel.clear(); // limpa a lista antes de preencher
        while (rs.next()) {
            int id = rs.getInt("id_time");
            String nome = rs.getString("nome");
            listModel.addElement(new Time(id, nome)); 
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao carregar times: " + e.getMessage());
    }
}
    
    
    public void pesquisarPorId(int id){
        String sql = "SELECT nome, cidade, ano_fundacao, tecnico FROM time WHERE id_time = ?";
        try (Connection conn = DriverManager.getConnection(URL, USERNAME, PASSWORD);
            PreparedStatement pst = conn.prepareStatement(sql)) { 
            pst.setInt(1, id);
            ResultSet rs = pst.executeQuery();
            //System.out.println(id
            if(rs.next()){
     
             txtNomeTime.setText(rs.getString("nome")); 
             txtCidade.setText(rs.getString("cidade"));
             txtAnoFundacao.setText(rs.getString("ano_fundacao"));
             txtTecnico.setText(rs.getString("tecnico"));
            }
            
            
        }catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao carregar times: " + e.getMessage());
    }
    }

    public void editarTime(String nome, String cidade, int ano, String tecnico, int id){
        String sql = "UPDATE time SET nome = ?, cidade = ?, ano_fundacao = ?, tecnico = ? WHERE id_time = ?";
        try (Connection conn = DriverManager.getConnection(URL, USERNAME, PASSWORD);
            PreparedStatement pst = conn.prepareStatement(sql)) { 
            pst.setString(1, nome);
            pst.setString(2, cidade);
            pst.setInt(3, ano);
            pst.setString(4, tecnico);
            pst.setInt(5, id);
            ResultSet rs = pst.executeQuery();
            //System.out.println(id
            
             int linhasAfetadas = pst.executeUpdate(); // Executa o UPDATE

        if (linhasAfetadas > 0) {
            JOptionPane.showMessageDialog(this, "Time atualizado com sucesso!");
        } else {
            System.out.println("Nenhum time encontrado com esse ID.");
        }
            
            
        }catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao carregar times: " + e.getMessage());
    }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnDelet;
    private javax.swing.JButton btnEditar;
    private javax.swing.JComboBox<Time> comboBoxTimes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblCadastro;
    private javax.swing.JList<Time> listTimes;
    private javax.swing.JTextField txtAnoFundacao;
    private javax.swing.JTextField txtCidade;
    private javax.swing.JTextField txtNomeTime;
    private javax.swing.JTextField txtTecnico;
    // End of variables declaration//GEN-END:variables
}
